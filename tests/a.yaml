tosca_definitions_version: tosca_simple_yaml_1_3

imports:
- ../common/types.yaml

relationship_types:

  frr.relationships.StaticRoute:
    derived_from: tosca.relationships.DependsOn
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
        operations:
          pre_configure_source:
            implementation: playbooks/configure_route.yaml
            inputs:
              config:
                value: { get_attribute: [ SOURCE, conf ] }
                type: list
              network:
                value: { get_attribute: [ TARGET, network, cidr ] }
                type: list
              gateway_interface:
                value: { get_attribute: [ TARGET, gateway, order ] }
                type: integer
              next_hop:
                value: { get_attribute: [ TARGET, next_hop, ip_address ] }
                type: string
            outputs:
              config: [ SOURCE, conf ]

  frr.relationships.Interface:
    derived_from: tosca.relationships.DependsOn
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
        operations:
          pre_configure_source:
            implementation: playbooks/configure_interface.yaml
            inputs:
              config:
                value: { get_attribute: [ SOURCE, conf ] }
                type: list
              interface_ip_address:
                value: { get_attribute: [ TARGET, ip_address ] }
                type: string
              interface_network_cidr:
                value: { get_attribute: [ TARGET, link, cidr ] }
                type: string
              interface_order:
                value: { get_attribute: [ TARGET, order ] }
                type: integer
            outputs:
              config: [ SOURCE, conf ]

  frr.relationships.ZebraHost:
    derived_from: tosca.relationships.DependsOn
    interfaces:
      Configure:
        type: tosca.interfaces.relationship.Configure
        operations:
          pre_configure_source:
            implementation: playbooks/configure_hostname.yaml
            inputs:
              config:
                value: { get_attribute: [ SOURCE, conf ] }
                type: list
              hostname:
                value: { get_attribute: [ TARGET, tosca_name ] }
                type: string
            outputs:
              config: [ SOURCE, conf ]

node_types:

  frr.nodes.StaticRoute:
    derived_from: tosca.nodes.Root
    requirements:
      - network:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]
      - gateway:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]
      - next_hop:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]

  frr.nodes.Config:
    derived_from: tosca.nodes.SoftwareComponent
    capabilities:
      file:
        type: common.capabilities.File
    properties:
      path:
        type: string
    attributes:
      conf:
        type: list
        default: []
    interfaces:
      Standard:
        operations:
          configure:
            implementation: playbooks/create_config.yaml
            inputs:
              dest_path:
                value: { get_attribute: [ SELF, path ] }
                type: string
              config:
                value: { get_attribute: [ SELF, conf ] }
                type: list

  frr.nodes.StaticdConfig:
    derived_from: frr.nodes.Config
    requirements:
      - runtime:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]
      - route:
          capability: tosca.capabilities.Node
          relationship: frr.relationships.StaticRoute
          occurrences: [ 0, UNBOUNDED ]

  frr.nodes.ZebraConfig:
    derived_from: frr.nodes.Config
    requirements:
      - runtime:
          capability: tosca.capabilities.Node
          relationship: frr.relationships.ZebraHost
          occurrences: [ 1, 1 ]
      - interface:
          capability: tosca.capabilities.Node
          relationship: frr.relationships.Interface
          occurrences: [ 0, UNBOUNDED ]

  frr.nodes.DaemonsConfig:
    derived_from: tosca.nodes.SoftwareComponent
    capabilities:
      file:
        type: common.capabilities.File
    properties:
      path:
        type: string
    requirements:
      - staticd:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          occurrences: [ 0, 1 ]
      - zebra:
          capability: tosca.capabilities.Node
          relationship: tosca.relationships.DependsOn
          occurrences: [ 0, 1 ]
    artifacts:
      daemons_template:
        type: tosca.artifacts.template
        file: ./playbooks/files/daemons.template
    interfaces:
      Standard:
        operations:
          configure:
            implementation: playbooks/create_daemons.yaml
            inputs:
              dest_path:
                value: { get_attribute: [ SELF, path ] }
                type: string
              zebra_config_path:
                value: { get_attribute: [ SELF, zebra, path ] }
                type: string
              staticd_config_path:
                value: { get_attribute: [ SELF, staticd, path ] }
                type: string
              daemons_template:
                value: { get_artifact: [ SELF, daemons_template ] }
                type: string

